"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var url = __importStar(require("url"));
var signature_1 = require("./util/signature");
var publicKey_1 = require("./util/publicKey");
var parser_1 = require("./util/parser");
/**
 * Helper function to construct the basestring and verify the signature of an
 * incoming request
 * @param uri String
 * @param submissionId MongoDB submission ObjectId
 * @param formId MongoDB submission ObjectId
 * @param epoch Number of milliseconds since Jan 1, 1970
 * @param signature base64 encoded signature
 * @param webhookPublicKey base64 webhook public key
 */
function verifySignature(uri, submissionId, formId, epoch, signature, webhookPublicKey) {
    var baseString = url.parse(uri).href + "." + submissionId + "." + formId + "." + epoch;
    return signature_1.verify(baseString, signature, webhookPublicKey);
}
/**
 * Helper function to verify that the epoch submitted is recent.
 * Prevents against replay attacks.
 * @param epoch The number of milliseconds since Jan 1, 1979
 * @param expiry Duration of expiry. The default is 5 minutes.
 */
function verifyEpoch(epoch, expiry) {
    if (expiry === void 0) { expiry = 300000; }
    var difference = Date.now() - epoch;
    return difference > 0 && difference < expiry;
}
/**
 * Higher order function that injects the webhook public key for authentication
 * @param webhookPublicKey The FormSG webhook public key
 */
function authenticate(webhookPublicKey) {
    /**
     * Injects the webhook public key for authentication
     * @param header X-FormSG-Signature header
     * @param uri The endpoint that FormSG is POSTing to
     * @throws {Error} If the signature or uri cannot be verified
     */
    function _internalAuthenticate(header, uri) {
        // Parse the header
        var _a = parser_1.parseSignatureHeader(header), signature = _a.v1, t = _a.t, submissionId = _a.s, formId = _a.f;
        var epoch = Number(t);
        if (!epoch || !signature || !submissionId || !formId) {
            throw new Error('X-FormSG-Signature header is invalid');
        }
        // Verify signature authenticity
        if (!verifySignature(uri, submissionId, formId, epoch, signature, webhookPublicKey)) {
            throw new Error("Signature could not be verified for uri=" + uri + " submissionId=" + submissionId + " formId=" + formId + " epoch=" + epoch + " signature=" + signature);
        }
        // Verify epoch recency
        if (!verifyEpoch(epoch)) {
            throw new Error("Signature is not recent for uri=" + uri + " submissionId=" + submissionId + " formId=" + formId + " epoch=" + epoch + " signature=" + signature);
        }
    }
    return _internalAuthenticate;
}
/**
 * Generates a signature based on the URI, submission ID and epoch timestamp.
 * @param {String} webhookSecretKey The base64 secret key
 * @returns The generated signature
 */
function generateSignature(webhookSecretKey) {
    /**
     *
     * @param params The parameters needed to generate the signature
     * @param params.uri Full URL of the request
     * @param params.submissionId Submission Mongo ObjectId saved to the database
     * @param params.epoch Number of milliseconds since Jan 1, 1970
     */
    function _internalGenerateSignature(_a) {
        var uri = _a.uri, submissionId = _a.submissionId, formId = _a.formId, epoch = _a.epoch;
        var baseString = url.parse(uri).href + "." + submissionId + "." + formId + "." + epoch;
        return signature_1.sign(baseString, webhookSecretKey);
    }
    return _internalGenerateSignature;
}
/**
 * Constructs the `X-FormSG-Signature` header
 * @param params The parameters needed to construct the header
 * @param params.epoch Epoch timestamp
 * @param params.submissionId Mongo ObjectId
 * @param params.formId Mongo ObjectId
 * @param params.signature A signature generated by the generateSignature() function
 * @returns The `X-FormSG-Signature` header
 */
function constructHeader(_a) {
    var epoch = _a.epoch, submissionId = _a.submissionId, formId = _a.formId, signature = _a.signature;
    return "t=" + epoch + ",s=" + submissionId + ",f=" + formId + ",v1=" + signature;
}
module.exports = function (params) {
    if (params === void 0) { params = {}; }
    var mode = params.mode, webhookSecretKey = params.webhookSecretKey;
    var webhookPublicKey = publicKey_1.getPublicKey(mode);
    return {
        /* Verification functions */
        authenticate: authenticate(webhookPublicKey),
        /* Signing functions */
        /* Return noop if a webhookSecretKey is not provided. */
        generateSignature: webhookSecretKey
            ? generateSignature(webhookSecretKey)
            : function () { },
        constructHeader: webhookSecretKey ? constructHeader : function () { },
    };
};
